(()=>{function jn(n,e){for(var t=0;t<e.length;t++){var r=e[t];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(n,typeof(o=(function(i,a){if(typeof i!="object"||i===null)return i;var s=i[Symbol.toPrimitive];if(s!==void 0){var l=s.call(i,"string");if(typeof l!="object")return l;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(i)})(r.key))=="symbol"?o:String(o),r)}var o}function H(n,e,t){return e&&jn(n.prototype,e),t&&jn(n,t),Object.defineProperty(n,"prototype",{writable:!1}),n}function x(){return x=Object.assign?Object.assign.bind():function(n){for(var e=1;e<arguments.length;e++){var t=arguments[e];for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&(n[r]=t[r])}return n},x.apply(this,arguments)}function D(n,e){n.prototype=Object.create(e.prototype),n.prototype.constructor=n,In(n,e)}function In(n,e){return In=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(t,r){return t.__proto__=r,t},In(n,e)}function Mn(n){if(n===void 0)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return n}function Fn(n,e){(e==null||e>n.length)&&(e=n.length);for(var t=0,r=new Array(e);t<e;t++)r[t]=n[t];return r}function O(n,e){var t=typeof Symbol<"u"&&n[Symbol.iterator]||n["@@iterator"];if(t)return(t=t.call(n)).next.bind(t);if(Array.isArray(n)||(t=(function(o,i){if(o){if(typeof o=="string")return Fn(o,i);var a=Object.prototype.toString.call(o).slice(8,-1);return a==="Object"&&o.constructor&&(a=o.constructor.name),a==="Map"||a==="Set"?Array.from(o):a==="Arguments"||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(a)?Fn(o,i):void 0}})(n))||e&&n&&typeof n.length=="number"){t&&(n=t);var r=0;return function(){return r>=n.length?{done:!0}:{done:!1,value:n[r++]}}}throw new TypeError(`Invalid attempt to iterate non-iterable instance.
In order to be iterable, non-array objects must have a [Symbol.iterator]() method.`)}var F;(function(n){n[n.Init=0]="Init",n[n.Loading=1]="Loading",n[n.Loaded=2]="Loaded",n[n.Rendered=3]="Rendered",n[n.Error=4]="Error"})(F||(F={}));var gn,g,ue,se,rn,Rn,le,mn={},ce=[],Te=/acit|ex(?:s|g|n|p|$)|rph|grid|ows|mnc|ntw|ine[ch]|zoo|^ord|itera/i;function X(n,e){for(var t in e)n[t]=e[t];return n}function fe(n){var e=n.parentNode;e&&e.removeChild(n)}function _(n,e,t){var r,o,i,a={};for(i in e)i=="key"?r=e[i]:i=="ref"?o=e[i]:a[i]=e[i];if(arguments.length>2&&(a.children=arguments.length>3?gn.call(arguments,2):t),typeof n=="function"&&n.defaultProps!=null)for(i in n.defaultProps)a[i]===void 0&&(a[i]=n.defaultProps[i]);return fn(n,a,r,o,null)}function fn(n,e,t,r,o){var i={type:n,props:e,key:t,ref:r,__k:null,__:null,__b:0,__e:null,__d:void 0,__c:null,__h:null,constructor:void 0,__v:o??++ue};return o==null&&g.vnode!=null&&g.vnode(i),i}function q(n){return n.children}function pn(n,e){this.props=n,this.context=e}function an(n,e){if(e==null)return n.__?an(n.__,n.__.__k.indexOf(n)+1):null;for(var t;e<n.__k.length;e++)if((t=n.__k[e])!=null&&t.__e!=null)return t.__e;return typeof n.type=="function"?an(n):null}function pe(n){var e,t;if((n=n.__)!=null&&n.__c!=null){for(n.__e=n.__c.base=null,e=0;e<n.__k.length;e++)if((t=n.__k[e])!=null&&t.__e!=null){n.__e=n.__c.base=t.__e;break}return pe(n)}}function Dn(n){(!n.__d&&(n.__d=!0)&&rn.push(n)&&!vn.__r++||Rn!==g.debounceRendering)&&((Rn=g.debounceRendering)||setTimeout)(vn)}function vn(){for(var n;vn.__r=rn.length;)n=rn.sort(function(e,t){return e.__v.__b-t.__v.__b}),rn=[],n.some(function(e){var t,r,o,i,a,s;e.__d&&(a=(i=(t=e).__v).__e,(s=t.__P)&&(r=[],(o=X({},i)).__v=i.__v+1,Ln(s,i,o,t.__n,s.ownerSVGElement!==void 0,i.__h!=null?[a]:null,r,a??an(i),i.__h),me(r,i),i.__e!=a&&pe(i)))})}function de(n,e,t,r,o,i,a,s,l,d){var u,p,f,c,h,S,y,m=r&&r.__k||ce,N=m.length;for(t.__k=[],u=0;u<e.length;u++)if((c=t.__k[u]=(c=e[u])==null||typeof c=="boolean"?null:typeof c=="string"||typeof c=="number"||typeof c=="bigint"?fn(null,c,null,null,c):Array.isArray(c)?fn(q,{children:c},null,null,null):c.__b>0?fn(c.type,c.props,c.key,c.ref?c.ref:null,c.__v):c)!=null){if(c.__=t,c.__b=t.__b+1,(f=m[u])===null||f&&c.key==f.key&&c.type===f.type)m[u]=void 0;else for(p=0;p<N;p++){if((f=m[p])&&c.key==f.key&&c.type===f.type){m[p]=void 0;break}f=null}Ln(n,c,f=f||mn,o,i,a,s,l,d),h=c.__e,(p=c.ref)&&f.ref!=p&&(y||(y=[]),f.ref&&y.push(f.ref,null,c),y.push(p,c.__c||h,c)),h!=null?(S==null&&(S=h),typeof c.type=="function"&&c.__k===f.__k?c.__d=l=he(c,l,n):l=_e(n,c,f,m,h,l),typeof t.type=="function"&&(t.__d=l)):l&&f.__e==l&&l.parentNode!=n&&(l=an(f))}for(t.__e=S,u=N;u--;)m[u]!=null&&ge(m[u],m[u]);if(y)for(u=0;u<y.length;u++)ve(y[u],y[++u],y[++u])}function he(n,e,t){for(var r,o=n.__k,i=0;o&&i<o.length;i++)(r=o[i])&&(r.__=n,e=typeof r.type=="function"?he(r,e,t):_e(t,r,r,o,r.__e,e));return e}function _e(n,e,t,r,o,i){var a,s,l;if(e.__d!==void 0)a=e.__d,e.__d=void 0;else if(t==null||o!=i||o.parentNode==null)n:if(i==null||i.parentNode!==n)n.appendChild(o),a=null;else{for(s=i,l=0;(s=s.nextSibling)&&l<r.length;l+=1)if(s==o)break n;n.insertBefore(o,i),a=i}return a!==void 0?a:o.nextSibling}function Un(n,e,t){e[0]==="-"?n.setProperty(e,t):n[e]=t==null?"":typeof t!="number"||Te.test(e)?t:t+"px"}function cn(n,e,t,r,o){var i;n:if(e==="style")if(typeof t=="string")n.style.cssText=t;else{if(typeof r=="string"&&(n.style.cssText=r=""),r)for(e in r)t&&e in t||Un(n.style,e,"");if(t)for(e in t)r&&t[e]===r[e]||Un(n.style,e,t[e])}else if(e[0]==="o"&&e[1]==="n")i=e!==(e=e.replace(/Capture$/,"")),e=e.toLowerCase()in n?e.toLowerCase().slice(2):e.slice(2),n.l||(n.l={}),n.l[e+i]=t,t?r||n.addEventListener(e,i?Wn:Bn,i):n.removeEventListener(e,i?Wn:Bn,i);else if(e!=="dangerouslySetInnerHTML"){if(o)e=e.replace(/xlink(H|:h)/,"h").replace(/sName$/,"s");else if(e!=="href"&&e!=="list"&&e!=="form"&&e!=="tabIndex"&&e!=="download"&&e in n)try{n[e]=t??"";break n}catch{}typeof t=="function"||(t==null||t===!1&&e.indexOf("-")==-1?n.removeAttribute(e):n.setAttribute(e,t))}}function Bn(n){this.l[n.type+!1](g.event?g.event(n):n)}function Wn(n){this.l[n.type+!0](g.event?g.event(n):n)}function Ln(n,e,t,r,o,i,a,s,l){var d,u,p,f,c,h,S,y,m,N,b,w,$,U,T,v=e.type;if(e.constructor!==void 0)return null;t.__h!=null&&(l=t.__h,s=e.__e=t.__e,e.__h=null,i=[s]),(d=g.__b)&&d(e);try{n:if(typeof v=="function"){if(y=e.props,m=(d=v.contextType)&&r[d.__c],N=d?m?m.props.value:d.__:r,t.__c?S=(u=e.__c=t.__c).__=u.__E:("prototype"in v&&v.prototype.render?e.__c=u=new v(y,N):(e.__c=u=new pn(y,N),u.constructor=v,u.render=Ae),m&&m.sub(u),u.props=y,u.state||(u.state={}),u.context=N,u.__n=r,p=u.__d=!0,u.__h=[],u._sb=[]),u.__s==null&&(u.__s=u.state),v.getDerivedStateFromProps!=null&&(u.__s==u.state&&(u.__s=X({},u.__s)),X(u.__s,v.getDerivedStateFromProps(y,u.__s))),f=u.props,c=u.state,p)v.getDerivedStateFromProps==null&&u.componentWillMount!=null&&u.componentWillMount(),u.componentDidMount!=null&&u.__h.push(u.componentDidMount);else{if(v.getDerivedStateFromProps==null&&y!==f&&u.componentWillReceiveProps!=null&&u.componentWillReceiveProps(y,N),!u.__e&&u.shouldComponentUpdate!=null&&u.shouldComponentUpdate(y,u.__s,N)===!1||e.__v===t.__v){for(u.props=y,u.state=u.__s,e.__v!==t.__v&&(u.__d=!1),u.__v=e,e.__e=t.__e,e.__k=t.__k,e.__k.forEach(function(W){W&&(W.__=e)}),b=0;b<u._sb.length;b++)u.__h.push(u._sb[b]);u._sb=[],u.__h.length&&a.push(u);break n}u.componentWillUpdate!=null&&u.componentWillUpdate(y,u.__s,N),u.componentDidUpdate!=null&&u.__h.push(function(){u.componentDidUpdate(f,c,h)})}if(u.context=N,u.props=y,u.__v=e,u.__P=n,w=g.__r,$=0,"prototype"in v&&v.prototype.render){for(u.state=u.__s,u.__d=!1,w&&w(e),d=u.render(u.props,u.state,u.context),U=0;U<u._sb.length;U++)u.__h.push(u._sb[U]);u._sb=[]}else do u.__d=!1,w&&w(e),d=u.render(u.props,u.state,u.context),u.state=u.__s;while(u.__d&&++$<25);u.state=u.__s,u.getChildContext!=null&&(r=X(X({},r),u.getChildContext())),p||u.getSnapshotBeforeUpdate==null||(h=u.getSnapshotBeforeUpdate(f,c)),T=d!=null&&d.type===q&&d.key==null?d.props.children:d,de(n,Array.isArray(T)?T:[T],e,t,r,o,i,a,s,l),u.base=e.__e,e.__h=null,u.__h.length&&a.push(u),S&&(u.__E=u.__=null),u.__e=!1}else i==null&&e.__v===t.__v?(e.__k=t.__k,e.__e=t.__e):e.__e=Le(t.__e,e,t,r,o,i,a,l);(d=g.diffed)&&d(e)}catch(W){e.__v=null,(l||i!=null)&&(e.__e=s,e.__h=!!l,i[i.indexOf(s)]=null),g.__e(W,e,t)}}function me(n,e){g.__c&&g.__c(e,n),n.some(function(t){try{n=t.__h,t.__h=[],n.some(function(r){r.call(t)})}catch(r){g.__e(r,t.__v)}})}function Le(n,e,t,r,o,i,a,s){var l,d,u,p=t.props,f=e.props,c=e.type,h=0;if(c==="svg"&&(o=!0),i!=null){for(;h<i.length;h++)if((l=i[h])&&"setAttribute"in l==!!c&&(c?l.localName===c:l.nodeType===3)){n=l,i[h]=null;break}}if(n==null){if(c===null)return document.createTextNode(f);n=o?document.createElementNS("http://www.w3.org/2000/svg",c):document.createElement(c,f.is&&f),i=null,s=!1}if(c===null)p===f||s&&n.data===f||(n.data=f);else{if(i=i&&gn.call(n.childNodes),d=(p=t.props||mn).dangerouslySetInnerHTML,u=f.dangerouslySetInnerHTML,!s){if(i!=null)for(p={},h=0;h<n.attributes.length;h++)p[n.attributes[h].name]=n.attributes[h].value;(u||d)&&(u&&(d&&u.__html==d.__html||u.__html===n.innerHTML)||(n.innerHTML=u&&u.__html||""))}if((function(S,y,m,N,b){var w;for(w in m)w==="children"||w==="key"||w in y||cn(S,w,null,m[w],N);for(w in y)b&&typeof y[w]!="function"||w==="children"||w==="key"||w==="value"||w==="checked"||m[w]===y[w]||cn(S,w,y[w],m[w],N)})(n,f,p,o,s),u)e.__k=[];else if(h=e.props.children,de(n,Array.isArray(h)?h:[h],e,t,r,o&&c!=="foreignObject",i,a,i?i[0]:t.__k&&an(t,0),s),i!=null)for(h=i.length;h--;)i[h]!=null&&fe(i[h]);s||("value"in f&&(h=f.value)!==void 0&&(h!==n.value||c==="progress"&&!h||c==="option"&&h!==p.value)&&cn(n,"value",h,p.value,!1),"checked"in f&&(h=f.checked)!==void 0&&h!==n.checked&&cn(n,"checked",h,p.checked,!1))}return n}function ve(n,e,t){try{typeof n=="function"?n(e):n.current=e}catch(r){g.__e(r,t)}}function ge(n,e,t){var r,o;if(g.unmount&&g.unmount(n),(r=n.ref)&&(r.current&&r.current!==n.__e||ve(r,null,e)),(r=n.__c)!=null){if(r.componentWillUnmount)try{r.componentWillUnmount()}catch(i){g.__e(i,e)}r.base=r.__P=null,n.__c=void 0}if(r=n.__k)for(o=0;o<r.length;o++)r[o]&&ge(r[o],e,t||typeof n.type!="function");t||n.__e==null||fe(n.__e),n.__=n.__e=n.__d=void 0}function Ae(n,e,t){return this.constructor(n,t)}function on(n,e,t){var r,o,i;g.__&&g.__(n,e),o=(r=typeof t=="function")?null:t&&t.__k||e.__k,i=[],Ln(e,n=(!r&&t||e).__k=_(q,null,[n]),o||mn,mn,e.ownerSVGElement!==void 0,!r&&t?[t]:o?null:e.firstChild?gn.call(e.childNodes):null,i,!r&&t?t:o?o.__e:e.firstChild,r),me(i,n)}function ye(){return"xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(/[xy]/g,function(n){var e=16*Math.random()|0;return(n=="x"?e:3&e|8).toString(16)})}gn=ce.slice,g={__e:function(n,e,t,r){for(var o,i,a;e=e.__;)if((o=e.__c)&&!o.__)try{if((i=o.constructor)&&i.getDerivedStateFromError!=null&&(o.setState(i.getDerivedStateFromError(n)),a=o.__d),o.componentDidCatch!=null&&(o.componentDidCatch(n,r||{}),a=o.__d),a)return o.__E=o}catch(s){n=s}throw n}},ue=0,se=function(n){return n!=null&&n.constructor===void 0},pn.prototype.setState=function(n,e){var t;t=this.__s!=null&&this.__s!==this.state?this.__s:this.__s=X({},this.state),typeof n=="function"&&(n=n(X({},t),this.props)),n&&X(t,n),n!=null&&this.__v&&(e&&this._sb.push(e),Dn(this))},pn.prototype.forceUpdate=function(n){this.__v&&(this.__e=!0,n&&this.__h.push(n),Dn(this))},pn.prototype.render=q,rn=[],vn.__r=0,le=0;var yn=(function(){function n(e){this._id=void 0,this._id=e||ye()}return H(n,[{key:"id",get:function(){return this._id}}]),n})();function He(n){return _(n.parentElement||"span",{dangerouslySetInnerHTML:{__html:n.content}})}function bn(n,e){return _(He,{content:n,parentElement:e})}var A,An=(function(n){function e(r){var o;return(o=n.call(this)||this).data=void 0,o.update(r),o}D(e,n);var t=e.prototype;return t.cast=function(r){return r instanceof HTMLElement?bn(r.outerHTML):r},t.update=function(r){return this.data=this.cast(r),this},e})(yn),Nn=(function(n){function e(r){var o;return(o=n.call(this)||this)._cells=void 0,o.cells=r||[],o}D(e,n);var t=e.prototype;return t.cell=function(r){return this._cells[r]},t.toArray=function(){return this.cells.map(function(r){return r.data})},e.fromCells=function(r){return new e(r.map(function(o){return new An(o.data)}))},H(e,[{key:"cells",get:function(){return this._cells},set:function(r){this._cells=r}},{key:"length",get:function(){return this.cells.length}}]),e})(yn),wn=(function(n){function e(t){var r;return(r=n.call(this)||this)._rows=void 0,r._length=void 0,r.rows=t instanceof Array?t:t instanceof Nn?[t]:[],r}return D(e,n),e.prototype.toArray=function(){return this.rows.map(function(t){return t.toArray()})},e.fromRows=function(t){return new e(t.map(function(r){return Nn.fromCells(r.cells)}))},e.fromArray=function(t){return new e((t=(function(r){return!r[0]||r[0]instanceof Array?r:[r]})(t)).map(function(r){return new Nn(r.map(function(o){return new An(o)}))}))},H(e,[{key:"rows",get:function(){return this._rows},set:function(t){this._rows=t}},{key:"length",get:function(){return this._length||this.rows.length},set:function(t){this._length=t}}]),e})(yn),Hn=(function(){function n(){this.callbacks=void 0}var e=n.prototype;return e.init=function(t){this.callbacks||(this.callbacks={}),t&&!this.callbacks[t]&&(this.callbacks[t]=[])},e.listeners=function(){return this.callbacks},e.on=function(t,r){return this.init(t),this.callbacks[t].push(r),this},e.off=function(t,r){var o=t;return this.init(),this.callbacks[o]&&this.callbacks[o].length!==0?(this.callbacks[o]=this.callbacks[o].filter(function(i){return i!=r}),this):this},e.emit=function(t){var r=arguments,o=t;return this.init(o),this.callbacks[o].length>0&&(this.callbacks[o].forEach(function(i){return i.apply(void 0,[].slice.call(r,1))}),!0)},n})();function dn(n,e){if(typeof n!=typeof e)return!1;if(n===null&&e===null)return!0;if(typeof n!="object")return n===e;if(Array.isArray(n)&&Array.isArray(e)){if(n.length!==e.length)return!1;for(var t=0;t<n.length;t++)if(!dn(n[t],e[t]))return!1;return!0}if(n.hasOwnProperty("constructor")&&e.hasOwnProperty("constructor")&&n.hasOwnProperty("props")&&e.hasOwnProperty("props")&&n.hasOwnProperty("key")&&e.hasOwnProperty("key")&&n.hasOwnProperty("ref")&&e.hasOwnProperty("ref")&&n.hasOwnProperty("type")&&e.hasOwnProperty("type"))return dn(n.props,e.props);var r=Object.keys(n),o=Object.keys(e);if(r.length!==o.length)return!1;for(var i=0,a=r;i<a.length;i++){var s=a[i];if(!e.hasOwnProperty(s)||!dn(n[s],e[s]))return!1}return!0}(function(n){n[n.Initiator=0]="Initiator",n[n.ServerFilter=1]="ServerFilter",n[n.ServerSort=2]="ServerSort",n[n.ServerLimit=3]="ServerLimit",n[n.Extractor=4]="Extractor",n[n.Transformer=5]="Transformer",n[n.Filter=6]="Filter",n[n.Sort=7]="Sort",n[n.Limit=8]="Limit"})(A||(A={}));var z=(function(n){function e(r){var o;return(o=n.call(this)||this).id=void 0,o._props=void 0,o._props={},o.id=ye(),r&&o.setProps(r),o}D(e,n);var t=e.prototype;return t.process=function(){var r=[].slice.call(arguments);this.validateProps instanceof Function&&this.validateProps.apply(this,r),this.emit.apply(this,["beforeProcess"].concat(r));var o=this._process.apply(this,r);return this.emit.apply(this,["afterProcess"].concat(r)),o},t.setProps=function(r){var o=x({},this._props,r);return dn(o,this._props)||(this._props=o,this.emit("propsUpdated",this)),this},H(e,[{key:"props",get:function(){return this._props}}]),e})(Hn),Oe=(function(n){function e(){return n.apply(this,arguments)||this}return D(e,n),e.prototype._process=function(t){return this.props.keyword?(r=String(this.props.keyword).trim(),o=this.props.columns,i=this.props.ignoreHiddenColumns,a=t,s=this.props.selector,r=r.replace(/[-[\]{}()*+?.,\\^$|#\s]/g,"\\$&"),new wn(a.rows.filter(function(l,d){return l.cells.some(function(u,p){if(!u||i&&o&&o[p]&&typeof o[p]=="object"&&o[p].hidden)return!1;var f="";if(typeof s=="function")f=s(u.data,d,p);else if(typeof u.data=="object"){var c=u.data;c&&c.props&&c.props.content&&(f=c.props.content)}else f=String(u.data);return new RegExp(r,"gi").test(f)})}))):t;var r,o,i,a,s},H(e,[{key:"type",get:function(){return A.Filter}}]),e})(z);function k(){var n="gridjs";return""+n+[].slice.call(arguments).reduce(function(e,t){return e+"-"+t},"")}function P(){return[].slice.call(arguments).map(function(n){return n?n.toString():""}).filter(function(n){return n}).reduce(function(n,e){return(n||"")+" "+e},"").trim()}var sn,I,Pn,qn,Vn=(function(n){function e(){return n.apply(this,arguments)||this}return D(e,n),e.prototype._process=function(t){if(!this.props.keyword)return t;var r={};return this.props.url&&(r.url=this.props.url(t.url,this.props.keyword)),this.props.body&&(r.body=this.props.body(t.body,this.props.keyword)),x({},t,r)},H(e,[{key:"type",get:function(){return A.ServerFilter}}]),e})(z),un=0,be=[],hn=[],zn=g.__b,$n=g.__r,Gn=g.diffed,Kn=g.__c,Xn=g.unmount;function kn(n,e){g.__h&&g.__h(I,n,un||e),un=0;var t=I.__H||(I.__H={__:[],__h:[]});return n>=t.__.length&&t.__.push({__V:hn}),t.__[n]}function Z(n){return un=1,(function(e,t,r){var o=kn(sn++,2);if(o.t=e,!o.__c&&(o.__=[Jn(void 0,t),function(a){var s=o.__N?o.__N[0]:o.__[0],l=o.t(s,a);s!==l&&(o.__N=[l,o.__[1]],o.__c.setState({}))}],o.__c=I,!I.u)){I.u=!0;var i=I.shouldComponentUpdate;I.shouldComponentUpdate=function(a,s,l){if(!o.__c.__H)return!0;var d=o.__c.__H.__.filter(function(p){return p.__c});if(d.every(function(p){return!p.__N}))return!i||i.call(this,a,s,l);var u=!1;return d.forEach(function(p){if(p.__N){var f=p.__[0];p.__=p.__N,p.__N=void 0,f!==p.__[0]&&(u=!0)}}),!(!u&&o.__c.props===a)&&(!i||i.call(this,a,s,l))}}return o.__N||o.__})(Jn,n)}function R(n,e){var t=kn(sn++,3);!g.__s&&ke(t.__H,e)&&(t.__=n,t.i=e,I.__H.__h.push(t))}function ln(n){return un=5,we(function(){return{current:n}},[])}function we(n,e){var t=kn(sn++,7);return ke(t.__H,e)?(t.__V=n(),t.i=e,t.__h=n,t.__V):t.__}function je(){for(var n;n=be.shift();)if(n.__P&&n.__H)try{n.__H.__h.forEach(_n),n.__H.__h.forEach(Tn),n.__H.__h=[]}catch(e){n.__H.__h=[],g.__e(e,n.__v)}}g.__b=function(n){I=null,zn&&zn(n)},g.__r=function(n){$n&&$n(n),sn=0;var e=(I=n.__c).__H;e&&(Pn===I?(e.__h=[],I.__h=[],e.__.forEach(function(t){t.__N&&(t.__=t.__N),t.__V=hn,t.__N=t.i=void 0})):(e.__h.forEach(_n),e.__h.forEach(Tn),e.__h=[])),Pn=I},g.diffed=function(n){Gn&&Gn(n);var e=n.__c;e&&e.__H&&(e.__H.__h.length&&(be.push(e)!==1&&qn===g.requestAnimationFrame||((qn=g.requestAnimationFrame)||Me)(je)),e.__H.__.forEach(function(t){t.i&&(t.__H=t.i),t.__V!==hn&&(t.__=t.__V),t.i=void 0,t.__V=hn})),Pn=I=null},g.__c=function(n,e){e.some(function(t){try{t.__h.forEach(_n),t.__h=t.__h.filter(function(r){return!r.__||Tn(r)})}catch(r){e.some(function(o){o.__h&&(o.__h=[])}),e=[],g.__e(r,t.__v)}}),Kn&&Kn(n,e)},g.unmount=function(n){Xn&&Xn(n);var e,t=n.__c;t&&t.__H&&(t.__H.__.forEach(function(r){try{_n(r)}catch(o){e=o}}),t.__H=void 0,e&&g.__e(e,t.__v))};var Zn=typeof requestAnimationFrame=="function";function Me(n){var e,t=function(){clearTimeout(r),Zn&&cancelAnimationFrame(e),setTimeout(n)},r=setTimeout(t,100);Zn&&(e=requestAnimationFrame(t))}function _n(n){var e=I,t=n.__c;typeof t=="function"&&(n.__c=void 0,t()),I=e}function Tn(n){var e=I;n.__c=n.__(),I=e}function ke(n,e){return!n||n.length!==e.length||e.some(function(t,r){return t!==n[r]})}function Jn(n,e){return typeof e=="function"?e(n):e}function M(){return(function(n){var e=I.context[n.__c],t=kn(sn++,9);return t.c=n,e?(t.__==null&&(t.__=!0,e.sub(I)),e.props.value):n.__})(Ne)}var Fe={search:{placeholder:"Type a keyword..."},sort:{sortAsc:"Sort column ascending",sortDesc:"Sort column descending"},pagination:{previous:"Previous",next:"Next",navigate:function(n,e){return"Page "+n+" of "+e},page:function(n){return"Page "+n},showing:"Showing",of:"of",to:"to",results:"results"},loading:"Loading...",noRecordsFound:"No matching records found",error:"An error happened while fetching the data"},Re=(function(){function n(t){this._language=void 0,this._defaultLanguage=void 0,this._language=t,this._defaultLanguage=Fe}var e=n.prototype;return e.getString=function(t,r){if(!r||!t)return null;var o=t.split("."),i=o[0];if(r[i]){var a=r[i];return typeof a=="string"?function(){return a}:typeof a=="function"?a:this.getString(o.slice(1).join("."),a)}return null},e.translate=function(t){var r,o=this.getString(t,this._language);return(r=o||this.getString(t,this._defaultLanguage))?r.apply(void 0,[].slice.call(arguments,1)):t},n})();function xn(){var n=M();return function(e){var t;return(t=n.translator).translate.apply(t,[e].concat([].slice.call(arguments,1)))}}var Qn=function(n){return function(e){return x({},e,{search:{keyword:n}})}};function tn(){return M().store}function V(n){var e=tn(),t=Z(n(e.getState())),r=t[0],o=t[1];return R(function(){return e.subscribe(function(){var i=n(e.getState());r!==i&&o(i)})},[]),r}function Ue(){var n,e=Z(void 0),t=e[0],r=e[1],o=M(),i=o.search,a=xn(),s=tn().dispatch,l=V(function(c){return c.search});R(function(){t&&t.setProps({keyword:l?.keyword})},[l,t]),R(function(){r(i.server?new Vn({keyword:i.keyword,url:i.server.url,body:i.server.body}):new Oe({keyword:i.keyword,columns:o.header&&o.header.columns,ignoreHiddenColumns:i.ignoreHiddenColumns||i.ignoreHiddenColumns===void 0,selector:i.selector})),i.keyword&&s(Qn(i.keyword))},[i]),R(function(){if(t)return o.pipeline.register(t),function(){return o.pipeline.unregister(t)}},[o,t]);var d,u,p,f=(function(c,h){return un=8,we(function(){return c},h)})((d=function(c){c.target instanceof HTMLInputElement&&s(Qn(c.target.value))},u=t instanceof Vn?i.debounceTimeout||250:0,function(){var c=arguments;return new Promise(function(h){p&&clearTimeout(p),p=setTimeout(function(){return h(d.apply(void 0,[].slice.call(c)))},u)})}),[i,t]);return _("div",{className:k(P("search",(n=o.className)==null?void 0:n.search))},_("input",{type:"search",placeholder:a("search.placeholder"),"aria-label":a("search.placeholder"),onInput:f,className:P(k("input"),k("search","input")),defaultValue:l?.keyword||""}))}var Yn=(function(n){function e(){return n.apply(this,arguments)||this}D(e,n);var t=e.prototype;return t.validateProps=function(){if(isNaN(Number(this.props.limit))||isNaN(Number(this.props.page)))throw Error("Invalid parameters passed")},t._process=function(r){var o=this.props.page;return new wn(r.rows.slice(o*this.props.limit,(o+1)*this.props.limit))},H(e,[{key:"type",get:function(){return A.Limit}}]),e})(z),ne=(function(n){function e(){return n.apply(this,arguments)||this}return D(e,n),e.prototype._process=function(t){var r={};return this.props.url&&(r.url=this.props.url(t.url,this.props.page,this.props.limit)),this.props.body&&(r.body=this.props.body(t.body,this.props.page,this.props.limit)),x({},t,r)},H(e,[{key:"type",get:function(){return A.ServerLimit}}]),e})(z);function Be(){var n=M(),e=n.pagination,t=e.server,r=e.summary,o=r===void 0||r,i=e.nextButton,a=i===void 0||i,s=e.prevButton,l=s===void 0||s,d=e.buttonsCount,u=d===void 0?3:d,p=e.limit,f=p===void 0?10:p,c=e.page,h=c===void 0?0:c,S=e.resetPageOnUpdate,y=S===void 0||S,m=ln(null),N=Z(h),b=N[0],w=N[1],$=Z(0),U=$[0],T=$[1],v=xn();R(function(){return t?(m.current=new ne({limit:f,page:b,url:t.url,body:t.body}),n.pipeline.register(m.current)):(m.current=new Yn({limit:f,page:b}),n.pipeline.register(m.current)),m.current instanceof ne?n.pipeline.on("afterProcess",function(E){return T(E.length)}):m.current instanceof Yn&&m.current.on("beforeProcess",function(E){return T(E.length)}),n.pipeline.on("updated",W),n.pipeline.on("error",function(){T(0),w(0)}),function(){n.pipeline.unregister(m.current),n.pipeline.off("updated",W)}},[]);var W=function(E){y&&E!==m.current&&(w(0),m.current.props.page!==0&&m.current.setProps({page:0}))},C=function(){return Math.ceil(U/f)},K=function(E){if(E>=C()||E<0||E===b)return null;w(E),m.current.setProps({page:E})};return _("div",{className:P(k("pagination"),n.className.pagination)},_(q,null,o&&U>0&&_("div",{role:"status","aria-live":"polite",className:P(k("summary"),n.className.paginationSummary),title:v("pagination.navigate",b+1,C())},v("pagination.showing")," ",_("b",null,v(""+(b*f+1)))," ",v("pagination.to")," ",_("b",null,v(""+Math.min((b+1)*f,U)))," ",v("pagination.of")," ",_("b",null,v(""+U))," ",v("pagination.results"))),_("div",{className:k("pages")},l&&_("button",{tabIndex:0,role:"button",disabled:b===0,onClick:function(){return K(b-1)},title:v("pagination.previous"),"aria-label":v("pagination.previous"),className:P(n.className.paginationButton,n.className.paginationButtonPrev)},v("pagination.previous")),(function(){if(u<=0)return null;var E=Math.min(C(),u),Y=Math.min(b,Math.floor(E/2));return b+Math.floor(E/2)>=C()&&(Y=E-(C()-b)),_(q,null,C()>E&&b-Y>0&&_(q,null,_("button",{tabIndex:0,role:"button",onClick:function(){return K(0)},title:v("pagination.firstPage"),"aria-label":v("pagination.firstPage"),className:n.className.paginationButton},v("1")),_("button",{tabIndex:-1,className:P(k("spread"),n.className.paginationButton)},"...")),Array.from(Array(E).keys()).map(function(L){return b+(L-Y)}).map(function(L){return _("button",{tabIndex:0,role:"button",onClick:function(){return K(L)},className:P(b===L?P(k("currentPage"),n.className.paginationButtonCurrent):null,n.className.paginationButton),title:v("pagination.page",L+1),"aria-label":v("pagination.page",L+1)},v(""+(L+1)))}),C()>E&&C()>b+Y+1&&_(q,null,_("button",{tabIndex:-1,className:P(k("spread"),n.className.paginationButton)},"..."),_("button",{tabIndex:0,role:"button",onClick:function(){return K(C()-1)},title:v("pagination.page",C()),"aria-label":v("pagination.page",C()),className:n.className.paginationButton},v(""+C()))))})(),a&&_("button",{tabIndex:0,role:"button",disabled:C()===b+1||C()===0,onClick:function(){return K(b+1)},title:v("pagination.next"),"aria-label":v("pagination.next"),className:P(n.className.paginationButton,n.className.paginationButtonNext)},v("pagination.next"))))}function We(n,e){return typeof n=="string"?n.indexOf("%")>-1?e/100*parseInt(n,10):parseInt(n,10):n}function Cn(n){return n?Math.floor(n)+"px":""}function qe(n){var e=n.tableRef.cloneNode(!0);return e.style.position="absolute",e.style.width="100%",e.style.zIndex="-2147483640",e.style.visibility="hidden",_("div",{ref:function(t){t&&t.appendChild(e)}})}function Ve(n){if(!n)return"";var e=n.split(" ");return e.length===1&&/([a-z][A-Z])+/g.test(n)?n:e.map(function(t,r){return r==0?t.toLowerCase():t.charAt(0).toUpperCase()+t.slice(1).toLowerCase()}).join("")}var Q,B=new((function(){function n(){}var e=n.prototype;return e.format=function(t,r){return"[Grid.js] ["+r.toUpperCase()+"]: "+t},e.error=function(t,r){r===void 0&&(r=!1);var o=this.format(t,"error");if(r)throw Error(o);console.error(o)},e.warn=function(t){console.warn(this.format(t,"warn"))},e.info=function(t){console.info(this.format(t,"info"))},n})());(function(n){n[n.Header=0]="Header",n[n.Footer=1]="Footer",n[n.Cell=2]="Cell"})(Q||(Q={}));var ee=(function(){function n(){this.plugins=void 0,this.plugins=[]}var e=n.prototype;return e.get=function(t){return this.plugins.find(function(r){return r.id===t})},e.add=function(t){return t.id?this.get(t.id)?(B.error("Duplicate plugin ID: "+t.id),this):(this.plugins.push(t),this):(B.error("Plugin ID cannot be empty"),this)},e.remove=function(t){var r=this.get(t);return r&&this.plugins.splice(this.plugins.indexOf(r),1),this},e.list=function(t){var r;return r=t!=null||t!=null?this.plugins.filter(function(o){return o.position===t}):this.plugins,r.sort(function(o,i){return o.order&&i.order?o.order-i.order:1})},n})();function Sn(n){var e=this,t=M();if(n.pluginId){var r=t.plugin.get(n.pluginId);return r?_(q,{},_(r.component,x({plugin:r},n.props))):null}return n.position!==void 0?_(q,{},t.plugin.list(n.position).map(function(o){return _(o.component,x({plugin:o},e.props.props))})):null}var en=(function(n){function e(){var r;return(r=n.call(this)||this)._columns=void 0,r._columns=[],r}D(e,n);var t=e.prototype;return t.adjustWidth=function(r,o,i){var a=r.container,s=r.autoWidth;if(!a)return this;var l=a.clientWidth,d={};o.current&&s&&(on(_(qe,{tableRef:o.current}),i.current),d=(function(c){var h=c.querySelector("table");if(!h)return{};var S=h.className,y=h.style.cssText;h.className=S+" "+k("shadowTable"),h.style.tableLayout="auto",h.style.width="auto",h.style.padding="0",h.style.margin="0",h.style.border="none",h.style.outline="none";var m=Array.from(h.parentNode.querySelectorAll("thead th")).reduce(function(N,b){var w;return b.style.width=b.clientWidth+"px",x(((w={})[b.getAttribute("data-column-id")]={minWidth:b.clientWidth},w),N)},{});return h.className=S,h.style.cssText=y,h.style.tableLayout="auto",Array.from(h.parentNode.querySelectorAll("thead th")).reduce(function(N,b){return N[b.getAttribute("data-column-id")].width=b.clientWidth,N},m)})(i.current));for(var u,p=O(e.tabularFormat(this.columns).reduce(function(c,h){return c.concat(h)},[]));!(u=p()).done;){var f=u.value;f.columns&&f.columns.length>0||(!f.width&&s?f.id in d&&(f.width=Cn(d[f.id].width),f.minWidth=Cn(d[f.id].minWidth)):f.width=Cn(We(f.width,l)))}return o.current&&s&&on(null,i.current),this},t.setSort=function(r,o){for(var i,a=O(o||this.columns||[]);!(i=a()).done;){var s=i.value;s.columns&&s.columns.length>0?s.sort=void 0:s.sort===void 0&&r?s.sort={}:s.sort?typeof s.sort=="object"&&(s.sort=x({},s.sort)):s.sort=void 0,s.columns&&this.setSort(r,s.columns)}},t.setResizable=function(r,o){for(var i,a=O(o||this.columns||[]);!(i=a()).done;){var s=i.value;s.resizable===void 0&&(s.resizable=r),s.columns&&this.setResizable(r,s.columns)}},t.setID=function(r){for(var o,i=O(r||this.columns||[]);!(o=i()).done;){var a=o.value;a.id||typeof a.name!="string"||(a.id=Ve(a.name)),a.id||B.error('Could not find a valid ID for one of the columns. Make sure a valid "id" is set for all columns.'),a.columns&&this.setID(a.columns)}},t.populatePlugins=function(r,o){for(var i,a=O(o);!(i=a()).done;){var s=i.value;s.plugin!==void 0&&r.add(x({id:s.id},s.plugin,{position:Q.Cell}))}},e.fromColumns=function(r){for(var o,i=new e,a=O(r);!(o=a()).done;){var s=o.value;if(typeof s=="string"||se(s))i.columns.push({name:s});else if(typeof s=="object"){var l=s;l.columns&&(l.columns=e.fromColumns(l.columns).columns),typeof l.plugin=="object"&&l.data===void 0&&(l.data=null),i.columns.push(s)}}return i},e.createFromConfig=function(r){var o=new e;return r.from?o.columns=e.fromHTMLTable(r.from).columns:r.columns?o.columns=e.fromColumns(r.columns).columns:!r.data||typeof r.data[0]!="object"||r.data[0]instanceof Array||(o.columns=Object.keys(r.data[0]).map(function(i){return{name:i}})),o.columns.length?(o.setID(),o.setSort(r.sort),o.setResizable(r.resizable),o.populatePlugins(r.plugin,o.columns),o):null},e.fromHTMLTable=function(r){for(var o,i=new e,a=O(r.querySelector("thead").querySelectorAll("th"));!(o=a()).done;){var s=o.value;i.columns.push({name:s.innerHTML,width:s.width})}return i},e.tabularFormat=function(r){var o=[],i=r||[],a=[];if(i&&i.length){o.push(i);for(var s,l=O(i);!(s=l()).done;){var d=s.value;d.columns&&d.columns.length&&(a=a.concat(d.columns))}a.length&&(o=o.concat(this.tabularFormat(a)))}return o},e.leafColumns=function(r){var o=[],i=r||[];if(i&&i.length)for(var a,s=O(i);!(a=s()).done;){var l=a.value;l.columns&&l.columns.length!==0||o.push(l),l.columns&&(o=o.concat(this.leafColumns(l.columns)))}return o},e.maximumDepth=function(r){return this.tabularFormat([r]).length-1},H(e,[{key:"columns",get:function(){return this._columns},set:function(r){this._columns=r}},{key:"visibleColumns",get:function(){return this._columns.filter(function(r){return!r.hidden})}}]),e})(yn),xe=function(){},te=(function(n){function e(r){var o;return(o=n.call(this)||this).data=void 0,o.set(r),o}D(e,n);var t=e.prototype;return t.get=function(){try{return Promise.resolve(this.data()).then(function(r){return{data:r,total:r.length}})}catch(r){return Promise.reject(r)}},t.set=function(r){return r instanceof Array?this.data=function(){return r}:r instanceof Function&&(this.data=r),this},e})(xe),Se=(function(n){function e(r){var o;return(o=n.call(this)||this).options=void 0,o.options=r,o}D(e,n);var t=e.prototype;return t.handler=function(r){return typeof this.options.handle=="function"?this.options.handle(r):r.ok?r.json():(B.error("Could not fetch data: "+r.status+" - "+r.statusText,!0),null)},t.get=function(r){var o=x({},this.options,r);return typeof o.data=="function"?o.data(o):fetch(o.url,o).then(this.handler.bind(this)).then(function(i){return{data:o.then(i),total:typeof o.total=="function"?o.total(i):void 0}})},e})(xe),ze=(function(){function n(){}return n.createFromConfig=function(e){var t=null;return e.data&&(t=new te(e.data)),e.from&&(t=new te(this.tableElementToArray(e.from)),e.from.style.display="none"),e.server&&(t=new Se(e.server)),t||B.error("Could not determine the storage type",!0),t},n.tableElementToArray=function(e){for(var t,r,o=[],i=O(e.querySelector("tbody").querySelectorAll("tr"));!(t=i()).done;){for(var a,s=[],l=O(t.value.querySelectorAll("td"));!(a=l()).done;){var d=a.value;d.childNodes.length===1&&d.childNodes[0].nodeType===Node.TEXT_NODE?s.push((r=d.innerHTML,new DOMParser().parseFromString(r,"text/html").documentElement.textContent)):s.push(bn(d.innerHTML))}o.push(s)}return o},n})(),re=typeof Symbol<"u"?Symbol.iterator||(Symbol.iterator=Symbol("Symbol.iterator")):"@@iterator";function j(n,e,t){if(!n.s){if(t instanceof nn){if(!t.s)return void(t.o=j.bind(null,n,e));1&e&&(e=t.s),t=t.v}if(t&&t.then)return void t.then(j.bind(null,n,e),j.bind(null,n,2));n.s=e,n.v=t;var r=n.o;r&&r(n)}}var nn=(function(){function n(){}return n.prototype.then=function(e,t){var r=new n,o=this.s;if(o){var i=1&o?e:t;if(i){try{j(r,1,i(this.v))}catch(a){j(r,2,a)}return r}return this}return this.o=function(a){try{var s=a.v;1&a.s?j(r,1,e?e(s):s):t?j(r,1,t(s)):j(r,2,s)}catch(l){j(r,2,l)}},r},n})();function oe(n){return n instanceof nn&&1&n.s}var $e=(function(n){function e(r){var o;return(o=n.call(this)||this)._steps=new Map,o.cache=new Map,o.lastProcessorIndexUpdated=-1,r&&r.forEach(function(i){return o.register(i)}),o}D(e,n);var t=e.prototype;return t.clearCache=function(){this.cache=new Map,this.lastProcessorIndexUpdated=-1},t.register=function(r,o){if(o===void 0&&(o=null),!r)throw Error("Processor is not defined");if(r.type===null)throw Error("Processor type is not defined");if(this.findProcessorIndexByID(r.id)>-1)throw Error("Processor ID "+r.id+" is already defined");return r.on("propsUpdated",this.processorPropsUpdated.bind(this)),this.addProcessorByPriority(r,o),this.afterRegistered(r),r},t.tryRegister=function(r,o){o===void 0&&(o=null);try{return this.register(r,o)}catch{}},t.unregister=function(r){if(r&&this.findProcessorIndexByID(r.id)!==-1){var o=this._steps.get(r.type);o&&o.length&&(this._steps.set(r.type,o.filter(function(i){return i!=r})),this.emit("updated",r))}},t.addProcessorByPriority=function(r,o){var i=this._steps.get(r.type);if(!i){var a=[];this._steps.set(r.type,a),i=a}if(o===null||o<0)i.push(r);else if(i[o]){var s=i.slice(0,o-1),l=i.slice(o+1);this._steps.set(r.type,s.concat(r).concat(l))}else i[o]=r},t.getStepsByType=function(r){return this.steps.filter(function(o){return o.type===r})},t.getSortedProcessorTypes=function(){return Object.keys(A).filter(function(r){return!isNaN(Number(r))}).map(function(r){return Number(r)})},t.process=function(r){try{var o=function(u){return i.lastProcessorIndexUpdated=s.length,i.emit("afterProcess",l),l},i=this,a=i.lastProcessorIndexUpdated,s=i.steps,l=r,d=(function(u,p){try{var f=(function(c,h,S){if(typeof c[re]=="function"){var y,m,N,b=c[re]();if((function T(v){try{for(;!(y=b.next()).done;)if((v=h(y.value))&&v.then){if(!oe(v))return void v.then(T,N||(N=j.bind(null,m=new nn,2)));v=v.v}m?j(m,1,v):m=v}catch(W){j(m||(m=new nn),2,W)}})(),b.return){var w=function(T){try{y.done||b.return()}catch{}return T};if(m&&m.then)return m.then(w,function(T){throw w(T)});w()}return m}if(!("length"in c))throw new TypeError("Object is not iterable");for(var $=[],U=0;U<c.length;U++)$.push(c[U]);return(function(T,v,W){var C,K,E=-1;return(function Y(L){try{for(;++E<T.length;)if((L=v(E))&&L.then){if(!oe(L))return void L.then(Y,K||(K=j.bind(null,C=new nn,2)));L=L.v}C?j(C,1,L):C=L}catch(De){j(C||(C=new nn),2,De)}})(),C})($,function(T){return h($[T])})})(s,function(c){var h=i.findProcessorIndexByID(c.id),S=(function(){if(h>=a)return Promise.resolve(c.process(l)).then(function(y){i.cache.set(c.id,l=y)});l=i.cache.get(c.id)})();if(S&&S.then)return S.then(function(){})})}catch(c){return p(c)}return f&&f.then?f.then(void 0,p):f})(0,function(u){throw B.error(u),i.emit("error",l),u});return Promise.resolve(d&&d.then?d.then(o):o())}catch(u){return Promise.reject(u)}},t.findProcessorIndexByID=function(r){return this.steps.findIndex(function(o){return o.id==r})},t.setLastProcessorIndex=function(r){var o=this.findProcessorIndexByID(r.id);this.lastProcessorIndexUpdated>o&&(this.lastProcessorIndexUpdated=o)},t.processorPropsUpdated=function(r){this.setLastProcessorIndex(r),this.emit("propsUpdated"),this.emit("updated",r)},t.afterRegistered=function(r){this.setLastProcessorIndex(r),this.emit("afterRegister"),this.emit("updated",r)},H(e,[{key:"steps",get:function(){for(var r,o=[],i=O(this.getSortedProcessorTypes());!(r=i()).done;){var a=this._steps.get(r.value);a&&a.length&&(o=o.concat(a))}return o.filter(function(s){return s})}}]),e})(Hn),Ge=(function(n){function e(){return n.apply(this,arguments)||this}return D(e,n),e.prototype._process=function(t){try{return Promise.resolve(this.props.storage.get(t))}catch(r){return Promise.reject(r)}},H(e,[{key:"type",get:function(){return A.Extractor}}]),e})(z),Ke=(function(n){function e(){return n.apply(this,arguments)||this}return D(e,n),e.prototype._process=function(t){var r=wn.fromArray(t.data);return r.length=t.total,r},H(e,[{key:"type",get:function(){return A.Transformer}}]),e})(z),Xe=(function(n){function e(){return n.apply(this,arguments)||this}return D(e,n),e.prototype._process=function(){return Object.entries(this.props.serverStorageOptions).filter(function(t){return typeof t[1]!="function"}).reduce(function(t,r){var o;return x({},t,((o={})[r[0]]=r[1],o))},{})},H(e,[{key:"type",get:function(){return A.Initiator}}]),e})(z),Ze=(function(n){function e(){return n.apply(this,arguments)||this}D(e,n);var t=e.prototype;return t.castData=function(r){if(!r||!r.length)return[];if(!this.props.header||!this.props.header.columns)return r;var o=en.leafColumns(this.props.header.columns);return r[0]instanceof Array?r.map(function(i){var a=0;return o.map(function(s,l){return s.data!==void 0?(a++,typeof s.data=="function"?s.data(i):s.data):i[l-a]})}):typeof r[0]!="object"||r[0]instanceof Array?[]:r.map(function(i){return o.map(function(a,s){return a.data!==void 0?typeof a.data=="function"?a.data(i):a.data:a.id?i[a.id]:(B.error("Could not find the correct cell for column at position "+s+`.
                          Make sure either 'id' or 'selector' is defined for all columns.`),null)})})},t._process=function(r){return{data:this.castData(r.data),total:r.total}},H(e,[{key:"type",get:function(){return A.Transformer}}]),e})(z),Je=(function(){function n(){}return n.createFromConfig=function(e){var t=new $e;return e.storage instanceof Se&&t.register(new Xe({serverStorageOptions:e.server})),t.register(new Ge({storage:e.storage})),t.register(new Ze({header:e.header})),t.register(new Ke),t},n})(),Qe=function(n){var e=this;this.state=void 0,this.listeners=[],this.isDispatching=!1,this.getState=function(){return e.state},this.getListeners=function(){return e.listeners},this.dispatch=function(t){if(typeof t!="function")throw new Error("Reducer is not a function");if(e.isDispatching)throw new Error("Reducers may not dispatch actions");e.isDispatching=!0;var r=e.state;try{e.state=t(e.state)}finally{e.isDispatching=!1}for(var o,i=O(e.listeners);!(o=i()).done;)(0,o.value)(e.state,r);return e.state},this.subscribe=function(t){if(typeof t!="function")throw new Error("Listener is not a function");return e.listeners=[].concat(e.listeners,[t]),function(){return e.listeners=e.listeners.filter(function(r){return r!==t})}},this.state=n},Ne=(function(n,e){var t={__c:e="__cC"+le++,__:null,Consumer:function(r,o){return r.children(o)},Provider:function(r){var o,i;return this.getChildContext||(o=[],(i={})[e]=this,this.getChildContext=function(){return i},this.shouldComponentUpdate=function(a){this.props.value!==a.value&&o.some(Dn)},this.sub=function(a){o.push(a);var s=a.componentWillUnmount;a.componentWillUnmount=function(){o.splice(o.indexOf(a),1),s&&s.call(a)}}),r.children}};return t.Provider.__=t.Consumer.contextType=t})(),Ye=(function(){function n(){Object.assign(this,n.defaultConfig())}var e=n.prototype;return e.assign=function(t){return Object.assign(this,t)},e.update=function(t){return t?(this.assign(n.fromPartialConfig(x({},this,t))),this):this},n.defaultConfig=function(){return{store:new Qe({status:F.Init,header:void 0,data:null}),plugin:new ee,tableRef:{current:null},width:"100%",height:"auto",processingThrottleMs:100,autoWidth:!0,style:{},className:{}}},n.fromPartialConfig=function(t){var r=new n().assign(t);return typeof t.sort=="boolean"&&t.sort&&r.assign({sort:{multiColumn:!0}}),r.assign({header:en.createFromConfig(r)}),r.assign({storage:ze.createFromConfig(r)}),r.assign({pipeline:Je.createFromConfig(r)}),r.assign({translator:new Re(r.language)}),r.plugin=new ee,r.search&&r.plugin.add({id:"search",position:Q.Header,component:Ue}),r.pagination&&r.plugin.add({id:"pagination",position:Q.Footer,component:Be}),r.plugins&&r.plugins.forEach(function(o){return r.plugin.add(o)}),r},n})();function Pe(n){var e,t=M();return _("td",x({role:n.role,colSpan:n.colSpan,"data-column-id":n.column&&n.column.id,className:P(k("td"),n.className,t.className.td),style:x({},n.style,t.style.td),onClick:function(r){n.messageCell||t.eventEmitter.emit("cellClick",r,n.cell,n.column,n.row)}},(e=n.column)?typeof e.attributes=="function"?e.attributes(n.cell.data,n.row,n.column):e.attributes:{}),n.column&&typeof n.column.formatter=="function"?n.column.formatter(n.cell.data,n.row,n.column):n.column&&n.column.plugin?_(Sn,{pluginId:n.column.id,props:{column:n.column,cell:n.cell,row:n.row}}):n.cell.data)}function On(n){var e=M(),t=V(function(r){return r.header});return _("tr",{className:P(k("tr"),e.className.tr),onClick:function(r){n.messageRow||e.eventEmitter.emit("rowClick",r,n.row)}},n.children?n.children:n.row.cells.map(function(r,o){var i=(function(a){if(t){var s=en.leafColumns(t.columns);if(s)return s[a]}return null})(o);return i&&i.hidden?null:_(Pe,{key:r.id,cell:r,row:n.row,column:i})}))}function En(n){return _(On,{messageRow:!0},_(Pe,{role:"alert",colSpan:n.colSpan,messageCell:!0,cell:new An(n.message),className:P(k("message"),n.className?n.className:null)}))}function nt(){var n=M(),e=V(function(a){return a.data}),t=V(function(a){return a.status}),r=V(function(a){return a.header}),o=xn(),i=function(){return r?r.visibleColumns.length:0};return _("tbody",{className:P(k("tbody"),n.className.tbody)},e&&e.rows.map(function(a){return _(On,{key:a.id,row:a})}),t===F.Loading&&(!e||e.length===0)&&_(En,{message:o("loading"),colSpan:i(),className:P(k("loading"),n.className.loading)}),t===F.Rendered&&e&&e.length===0&&_(En,{message:o("noRecordsFound"),colSpan:i(),className:P(k("notfound"),n.className.notfound)}),t===F.Error&&_(En,{message:o("error"),colSpan:i(),className:P(k("error"),n.className.error)}))}var et=(function(n){function e(){return n.apply(this,arguments)||this}D(e,n);var t=e.prototype;return t.validateProps=function(){for(var r,o=O(this.props.columns);!(r=o()).done;){var i=r.value;i.direction===void 0&&(i.direction=1),i.direction!==1&&i.direction!==-1&&B.error("Invalid sort direction "+i.direction)}},t.compare=function(r,o){return r>o?1:r<o?-1:0},t.compareWrapper=function(r,o){for(var i,a=0,s=O(this.props.columns);!(i=s()).done;){var l=i.value;if(a!==0)break;var d=r.cells[l.index].data,u=o.cells[l.index].data;a|=typeof l.compare=="function"?l.compare(d,u)*l.direction:this.compare(d,u)*l.direction}return a},t._process=function(r){var o=[].concat(r.rows);o.sort(this.compareWrapper.bind(this));var i=new wn(o);return i.length=r.length,i},H(e,[{key:"type",get:function(){return A.Sort}}]),e})(z),ie=function(n,e,t,r){return function(o){var i,a=(i=o.sort)!=null&&i.columns?o.sort.columns.map(function(S){return x({},S)}):[],s=a.length,l=a.find(function(S){return S.index===n}),d=!1,u=!1,p=!1,f=!1;if(l!==void 0?t?l.direction===-1?p=!0:f=!0:s===1?f=!0:s>1&&(u=!0,d=!0):s===0?d=!0:s>0&&!t?(d=!0,u=!0):s>0&&t&&(d=!0),u&&(a=[]),d)a.push({index:n,direction:e,compare:r});else if(f){var c=a.indexOf(l);a[c].direction=e}else if(p){var h=a.indexOf(l);a.splice(h,1)}return x({},o,{sort:{columns:a}})}},Ce=function(n,e,t){return function(r){var o=(r.sort?[].concat(r.sort.columns):[]).find(function(i){return i.index===n});return x({},r,o?ie(n,o.direction===1?-1:1,e,t)(r):ie(n,1,e,t)(r))}},tt=(function(n){function e(){return n.apply(this,arguments)||this}return D(e,n),e.prototype._process=function(t){var r={};return this.props.url&&(r.url=this.props.url(t.url,this.props.columns)),this.props.body&&(r.body=this.props.body(t.body,this.props.columns)),x({},t,r)},H(e,[{key:"type",get:function(){return A.ServerSort}}]),e})(z);function rt(n){var e=M(),t=tn().dispatch,r=xn(),o=Z(0),i=o[0],a=o[1],s=e.sort,l=V(function(p){return p.sort}),d=typeof s?.server=="object"?A.ServerSort:A.Sort,u=function(){var p=e.pipeline.getStepsByType(d);if(p.length)return p[0]};return R(function(){var p=u()||(d===A.ServerSort?new tt(x({columns:l?l.columns:[]},s.server)):new et({columns:l?l.columns:[]}));return e.pipeline.tryRegister(p),function(){return e.pipeline.unregister(p)}},[e]),R(function(){if(l){var p,f=l.columns.find(function(c){return c.index===n.index});f?(i===0&&(f.direction=(p=n.direction)!=null?p:1),a(f.direction)):a(0)}},[l]),R(function(){var p=u();p&&l&&p.setProps({columns:l.columns})},[l]),_("button",{tabIndex:-1,"aria-label":r("sort.sort"+(i===1?"Desc":"Asc")),title:r("sort.sort"+(i===1?"Desc":"Asc")),className:P(k("sort"),k("sort",(function(p){return p===1?"asc":p===-1?"desc":"neutral"})(i)),e.className.sort),onClick:function(p){p.preventDefault(),p.stopPropagation(),t(Ce(n.index,p.shiftKey===!0&&s.multiColumn,n.compare))}})}var Ee=function(n,e){var t;e===void 0&&(e=100);var r=Date.now(),o=function(){r=Date.now(),n.apply(void 0,[].slice.call(arguments))};return function(){var i=[].slice.call(arguments),a=Date.now(),s=a-r;s>=e?o.apply(void 0,i):(t&&clearTimeout(t),t=setTimeout(function(){o.apply(void 0,i),t=null},e-s))}};function ot(n){var e,t=function(a){return a instanceof MouseEvent?Math.floor(a.pageX):Math.floor(a.changedTouches[0].pageX)},r=function(a){a.stopPropagation();var s=parseInt(n.thRef.current.style.width,10)-t(a);e=Ee(function(l){return o(l,s)},10),document.addEventListener("mouseup",i),document.addEventListener("touchend",i),document.addEventListener("mousemove",e),document.addEventListener("touchmove",e)},o=function(a,s){a.stopPropagation();var l=n.thRef.current;s+t(a)>=parseInt(l.style.minWidth,10)&&(l.style.width=s+t(a)+"px")},i=function a(s){s.stopPropagation(),document.removeEventListener("mouseup",a),document.removeEventListener("mousemove",e),document.removeEventListener("touchmove",e),document.removeEventListener("touchend",a)};return _("div",{className:P(k("th"),k("resizable")),onMouseDown:r,onTouchStart:r,onClick:function(a){return a.stopPropagation()}})}function it(n){var e=M(),t=ln(null),r=Z({}),o=r[0],i=r[1],a=tn().dispatch;R(function(){if(e.fixedHeader&&t.current){var u=t.current.offsetTop;typeof u=="number"&&i({top:u})}},[t]);var s,l=function(){return n.column.sort!=null},d=function(u){u.stopPropagation(),l()&&a(Ce(n.index,u.shiftKey===!0&&e.sort.multiColumn,n.column.sort.compare))};return _("th",x({ref:t,"data-column-id":n.column&&n.column.id,className:P(k("th"),l()?k("th","sort"):null,e.fixedHeader?k("th","fixed"):null,e.className.th),onClick:d,style:x({},e.style.th,{minWidth:n.column.minWidth,width:n.column.width},o,n.style),onKeyDown:function(u){l()&&u.which===13&&d(u)},rowSpan:n.rowSpan>1?n.rowSpan:void 0,colSpan:n.colSpan>1?n.colSpan:void 0},(s=n.column)?typeof s.attributes=="function"?s.attributes(null,null,n.column):s.attributes:{},l()?{tabIndex:0}:{}),_("div",{className:k("th","content")},n.column.name!==void 0?n.column.name:n.column.plugin!==void 0?_(Sn,{pluginId:n.column.plugin.id,props:{column:n.column}}):null),l()&&_(rt,x({index:n.index},n.column.sort)),n.column.resizable&&n.index<e.header.visibleColumns.length-1&&_(ot,{column:n.column,thRef:t}))}function at(){var n,e=M(),t=V(function(r){return r.header});return t?_("thead",{key:t.id,className:P(k("thead"),e.className.thead)},(n=en.tabularFormat(t.columns)).map(function(r,o){return(function(i,a,s){var l=en.leafColumns(t.columns);return _(On,null,i.map(function(d){return d.hidden?null:(function(u,p,f,c){var h=(function(S,y,m){var N=en.maximumDepth(S),b=m-y;return{rowSpan:Math.floor(b-N-N/b),colSpan:S.columns&&S.columns.length||1}})(u,p,c);return _(it,{column:u,index:f,colSpan:h.colSpan,rowSpan:h.rowSpan})})(d,a,l.indexOf(d),s)}))})(r,o,n.length)})):null}var ae=function(n){return function(e){return x({},e,{header:n})}};function ut(){var n=M(),e=ln(null),t=tn().dispatch;return R(function(){e&&t((function(r){return function(o){return x({},o,{tableRef:r})}})(e))},[e]),_("table",{ref:e,role:"grid",className:P(k("table"),n.className.table),style:x({},n.style.table,{height:n.height})},_(at,null),_(nt,null))}function st(){var n=Z(!0),e=n[0],t=n[1],r=ln(null),o=M();return R(function(){r.current.children.length===0&&t(!1)},[r]),e?_("div",{ref:r,className:P(k("head"),o.className.header),style:x({},o.style.header)},_(Sn,{position:Q.Header})):null}function lt(){var n=ln(null),e=Z(!0),t=e[0],r=e[1],o=M();return R(function(){n.current.children.length===0&&r(!1)},[n]),t?_("div",{ref:n,className:P(k("footer"),o.className.footer),style:x({},o.style.footer)},_(Sn,{position:Q.Footer})):null}function ct(){var n=M(),e=tn().dispatch,t=V(function(s){return s.status}),r=V(function(s){return s.data}),o=V(function(s){return s.tableRef}),i={current:null},a=Ee(function(){try{e(function(l){return x({},l,{status:F.Loading})});var s=(function(l,d){try{var u=Promise.resolve(n.pipeline.process()).then(function(p){e((function(f){return function(c){return f?x({},c,{data:f,status:F.Loaded}):c}})(p)),setTimeout(function(){e(function(f){return f.status===F.Loaded?x({},f,{status:F.Rendered}):f})},0)})}catch(p){return d(p)}return u&&u.then?u.then(void 0,d):u})(0,function(l){B.error(l),e(function(d){return x({},d,{data:null,status:F.Error})})});return Promise.resolve(s&&s.then?s.then(function(){}):void 0)}catch(l){return Promise.reject(l)}},n.processingThrottleMs);return R(function(){return e(ae(n.header)),a(),n.pipeline.on("updated",a),function(){return n.pipeline.off("updated",a)}},[]),R(function(){n.header&&t===F.Loaded&&r!=null&&r.length&&e(ae(n.header.adjustWidth(n,o,i)))},[r,n,i]),_("div",{role:"complementary",className:P("gridjs",k("container"),t===F.Loading?k("loading"):null,n.className.container),style:x({},n.style.container,{width:n.width})},t===F.Loading&&_("div",{className:k("loading-bar")}),_(st,null),_("div",{className:k("wrapper"),style:{height:n.height}},_(ut,null)),_(lt,null),_("div",{ref:i,id:"gridjs-temp",className:k("temp")}))}var Ie=(function(n){function e(r){var o;return(o=n.call(this)||this).config=void 0,o.plugin=void 0,o.config=new Ye().assign({instance:Mn(o),eventEmitter:Mn(o)}).update(r),o.plugin=o.config.plugin,o}D(e,n);var t=e.prototype;return t.updateConfig=function(r){return this.config.update(r),this},t.createElement=function(){return _(Ne.Provider,{value:this.config,children:_(ct,{})})},t.forceRender=function(){return this.config&&this.config.container||B.error("Container is empty. Make sure you call render() before forceRender()",!0),this.destroy(),on(this.createElement(),this.config.container),this},t.destroy=function(){this.config.pipeline.clearCache(),on(null,this.config.container)},t.render=function(r){return r||B.error("Container element cannot be null",!0),r.childNodes.length>0?(B.error("The container element "+r+" is not empty. Make sure the container is empty and call render() again"),this):(this.config.container=r,on(this.createElement(),r),this)},e})(Hn);var G=class{tableContainerId;mongoDbCollection;allData=[];grid=null;constructor(e,t,r=[]){this.allData=r,this.tableContainerId=e,this.mongoDbCollection=t,this.fetchData()}async fetchData(){try{let e=await fetch(`/api/data?collection=${this.mongoDbCollection}`);this.allData=await e.json(),this.renderTable(this.allData)}catch(e){console.error("Error fetching data:",e)}}renderTable(e){let t=document.getElementById(this.tableContainerId);t&&(t.innerHTML="",this.grid&&(this.grid.destroy(),this.grid=null),this.grid=new Ie({columns:["Title","Date Added to db"],data:e.map(r=>[bn(`<a href="${r.link||"#"}" target="_blank" rel="noopener noreferrer">
					${r.title||""}
				</a>`),r.added_to_mongo_at?new Date(r.added_to_mongo_at).toLocaleDateString("en-AU"):""]),search:!0,pagination:!0,sort:!0}),this.grid.render(t))}filterByDate(e,t){if(!e&&!t){this.renderTable(this.allData);return}let r=null,o=null;e&&(r=new Date(e),r.setHours(0,0,0,0)),t&&(o=new Date(t),o.setHours(23,59,59,999));let i=this.allData.filter(a=>{let s=new Date(a.added_to_mongo_at).toLocaleDateString("en",{timeZone:"Australia/Sydney"}),l=new Date(s);return console.log("aestDate",l),console.log("fromDate",r),console.log("toDate",o),r&&o?l>=r&&l<=o:r?l>=r:o?l<=o:!0});this.renderTable(i)}};var J={};function ft(){let n="date-from",e="date-to",t=document.getElementById(n),r=document.getElementById(e),o=t?.value??"",i=r?.value??"",a=o?new Date(o):null,s=i?new Date(i):null;for(let l in J)J[l].filterByDate(a,s)}var pt=document.getElementById("apply-filter");pt?.addEventListener("click",ft);J["grant-connect"]=new G("grant-connect-table-container","grant_connect");J["nsw-grants"]=new G("nsw-grants-table-container","nsw_grants");J["vic-grants"]=new G("vic-grants-table-container","vic_grants");J["vic-business"]=new G("vic-business-table-container","vic_business");J["qld-grants"]=new G("qld-grants-table-container","qld_grants");J["nt-grants"]=new G("nt-grants-table-container","nt_grants");})();
//# sourceMappingURL=data:application/json;base64,
